shift/reduce conflict between
  StaticConstructor -> · Identifier/"static" constBody
and
  TypeCtor -> Identifier/"shared"
With input:
  Identifier/"shared" · Identifier/"static" …
Shared origin: (DeclDef | endOfLine)+ -> · DeclDef
  via DeclDef -> · SharedStaticConstructor
    via SharedStaticConstructor -> Identifier/"shared" · StaticConstructor
      StaticConstructor -> · Identifier/"static" constBody
  via DeclDef -> · Declaration
    via Declaration -> · VarDeclarations ";"
      via VarDeclarations -> · AutoDeclaration
        via AutoDeclaration -> · StorageClass+ csv<autoAssignment>
          via StorageClass+ -> · StorageClass
            via StorageClass -> · attributeAndStorageClass
              via attributeAndStorageClass -> · TypeCtor
                TypeCtor -> Identifier/"shared" ·

shift/reduce conflict between
  constBody -> · Identifier/"this" "(" ")" FunctionBody
and
  attributeAndStorageClass -> Identifier/"static"
With input:
  Identifier/"static" · Identifier/"this" …
Shared origin: (DeclDef | endOfLine)+ -> · DeclDef
  via DeclDef -> · StaticConstructor
    via StaticConstructor -> Identifier/"static" · constBody
      constBody -> · Identifier/"this" "(" ")" FunctionBody
  via DeclDef -> · Declaration
    via Declaration -> · VarDeclarations ";"
      via VarDeclarations -> · AutoDeclaration
        via AutoDeclaration -> · StorageClass+ csv<autoAssignment>
          via StorageClass+ -> · StorageClass
            via StorageClass -> · attributeAndStorageClass
              attributeAndStorageClass -> Identifier/"static" ·

shift/reduce conflict between
  EnumDeclaration -> Identifier/"enum" · Identifier ";"
and
  storageClassExclusive -> Identifier/"enum"
With input:
  Identifier/"enum" · Identifier …
Shared origin: DeclDef -> · Declaration
  via Declaration -> · EnumDeclaration
    EnumDeclaration -> Identifier/"enum" · Identifier ";"
  via Declaration -> · VarDeclarations ";"
    via VarDeclarations -> · AutoDeclaration
      via AutoDeclaration -> · StorageClass+ csv<autoAssignment>
        via StorageClass+ -> · StorageClass
          via StorageClass -> · storageClassExclusive
            storageClassExclusive -> Identifier/"enum" ·

shift/reduce conflict between
  ImportDeclaration -> Identifier/"public" · Identifier/"static" Identifier/"import" ImportList ";"
and
  VisibilityAttribute -> Identifier/"public"
With input:
  Identifier/"public" · Identifier/"static" …
Shared origin: (DeclDef | endOfLine)+ -> · DeclDef
  via DeclDef -> · Declaration
    via Declaration -> · ImportDeclaration
      ImportDeclaration -> Identifier/"public" · Identifier/"static" Identifier/"import" ImportList ";"
  via DeclDef -> · AttributeSpecifier
    via AttributeSpecifier -> · Attribute DeclarationBlock
      via Attribute -> · attributeExclusive
        via attributeExclusive -> · VisibilityAttribute
          VisibilityAttribute -> Identifier/"public" ·

shift/reduce conflict between
  Parameters -> · "(" ")"
and
  Declarator -> Identifier
With input:
  BasicType Identifier · "(" …
Shared origin: DeclDef -> · Declaration
  via Declaration -> · FuncDeclaration
    via FuncDeclaration -> BasicType · FuncDeclarator FunctionBody
      via FuncDeclarator -> Identifier · FuncDeclaratorSuffix
        via FuncDeclaratorSuffix -> · Parameters MemberFunctionAttribute+
          Parameters -> · "(" ")"
  via Declaration -> · VarDeclarations ";"
    via VarDeclarations -> BasicType · Declarators
      via Declarators -> · DeclaratorInitializer "," csv<DeclaratorIdentifier>
        via DeclaratorInitializer -> · Declarator templateParameters "=" Initializer
          Declarator -> Identifier ·

shift/reduce conflict between
  QualifiedIdentifier -> · Identifier
and
  ConditionalDeclaration -> condition ":"
With input:
  condition ":" · Identifier …
Shared origin: DeclDef -> · Declaration
  via Declaration -> · VarDeclarations ";"
    via VarDeclarations -> · BasicType Declarators
      via BasicType -> · QualifiedIdentifier
        QualifiedIdentifier -> · Identifier
  via Declaration -> · ConditionalDeclaration
    ConditionalDeclaration -> condition ":" ·

shift/reduce conflict between
  EmptyDeclaration -> · ";"
and
  StaticForeachDeclaration -> staticForeach ":"
With input:
  staticForeach ":" · ";" …
Shared origin: Declaration -> · StaticForeachDeclaration
  via StaticForeachDeclaration -> staticForeach ":" · DeclDef+
    via DeclDef+ -> · DeclDef
      via DeclDef -> · EmptyDeclaration
        EmptyDeclaration -> · ";"

shift/reduce conflict between
  templateArguments -> · "!" TemplateSingleArgument
and
  MixinQualifiedIdentifier -> Identifier
With input:
  Identifier/"mixin" Identifier · "!" …
Shared origin: MixinTemplateName -> · MixinQualifiedIdentifier
  via MixinQualifiedIdentifier -> Identifier · templateArguments "." MixinQualifiedIdentifier    templateArguments -> · "!" TemplateSingleArgument

shift/reduce conflict between
  PrimaryExpression -> FundamentalType · "(" ")"
and
  BasicType -> FundamentalType
With input:
  Identifier "[" FundamentalType · "(" …
Shared origin: PowExpression -> · PostfixExpression "^^" UnaryExpression
  via PostfixExpression -> · PrimaryExpression
    PrimaryExpression -> FundamentalType · "(" ")"
  via PostfixExpression -> · BasicType "(" ArgumentList ")"
    BasicType -> FundamentalType ·

reduce/reduce conflict between
  Declaration -> ImportDeclaration
and
  nonEmptyStatementNoCaseNoDefault -> ImportDeclaration
With input:
  Identifier/"invariant" "{" ImportDeclaration · Identifier …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      Declaration -> ImportDeclaration ·

shift/reduce conflict between
  DebugCondition -> Identifier/"debug" · "(" IntegerExpression ")"
and
  DebugCondition -> Identifier/"debug"
With input:
  Identifier/"invariant" "{" Identifier/"debug" · "(" …
Shared origin: condition -> · DebugCondition

reduce/reduce conflict between
  VariadicArgumentsAttribute -> Identifier/"return"
and
  InOut -> Identifier/"return"
With input:
  Identifier "[" "(" Identifier/"return" · Identifier/"const" …
Shared origin: Parameters -> "(" · parameterList ")"
  via parameterList -> · VariadicArgumentsAttribute+ "..."
    via VariadicArgumentsAttribute+ -> · VariadicArgumentsAttribute
      VariadicArgumentsAttribute -> Identifier/"return" ·
  via parameterList -> · Parameter "," parameterList
    via Parameter -> · parameterAttribute+ Type "=" AssignExpression
      via parameterAttribute+ -> · parameterAttribute
        via parameterAttribute -> · InOut
          InOut -> Identifier/"return" ·

shift/reduce conflict between
  TypeSuffix -> · "[" "]"
and
  Type -> BasicType
With input:
  Identifier "[" Identifier/"new" BasicType · "[" …
Shared origin: NewExpression -> Identifier/"new" · Type
  via Type -> BasicType · TypeSuffix+
    via TypeSuffix+ -> · TypeSuffix
      TypeSuffix -> · "[" "]"

shift/reduce conflict between
  NewExpression -> Identifier/"new" Type · "(" ")"
and
  NewExpression -> Identifier/"new" Type
With input:
  Identifier "[" Identifier/"new" Type · "(" …
Shared origin: PrimaryExpression -> · NewExpression

shift/reduce conflict between
  ThrowExpression -> · Identifier/"throw" AssignExpression ";"
and
  LabeledStatement -> Identifier ":"
With input:
  Identifier/"invariant" "{" Identifier ":" · Identifier/"throw" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · ThrowExpression
                                  ThrowExpression -> · Identifier/"throw" AssignExpression ";"
  via nonEmptyStatementNoCaseNoDefault -> · LabeledStatement
    LabeledStatement -> Identifier ":" ·

shift/reduce conflict between
  FundamentalType -> · Identifier/"bool"
and
  StorageClass+ -> StorageClass+ StorageClass+
With input:
  Identifier/"invariant" "{" StorageClass+ StorageClass+ · Identifier/"bool" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · declarationStatement
  via declarationStatement -> StorageClass+ · Declaration
    via Declaration -> · FuncDeclaration
      via FuncDeclaration -> StorageClass+ · BasicType FuncDeclarator FunctionBody
        via BasicType -> · FundamentalType
          FundamentalType -> · Identifier/"bool"
  via declarationStatement -> · StorageClass+ Declaration
    StorageClass+ -> StorageClass+ StorageClass+ ·

shift/reduce conflict between
  EmptyStatement -> · ";"
and
  attributeExclusive -> Pragma
With input:
  Identifier/"invariant" "{" condition Pragma · ";" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · PragmaStatement
    via PragmaStatement -> Pragma · statement
      via statement -> · EmptyStatement
        EmptyStatement -> · ";"
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          via DeclarationBlock -> · DeclDef
            via DeclDef -> · AttributeSpecifier
              via AttributeSpecifier -> · Attribute DeclarationBlock
                via Attribute -> · attributeExclusive
                  attributeExclusive -> Pragma ·

reduce/reduce conflict between
  DeclDef -> Declaration
and
  declarationStatement -> Declaration
With input:
  Identifier/"invariant" "{" condition Declaration · Identifier …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · declarationStatement
  via declarationStatement -> · Declaration
    via Declaration -> · ConditionalDeclaration
      via ConditionalDeclaration -> condition · DeclarationBlock
        via DeclarationBlock -> · DeclDef
          DeclDef -> Declaration ·

reduce/reduce conflict between
  scopeStatement -> BlockStatement
and
  SpecifiedFunctionBody -> BlockStatement
With input:
  Identifier/"invariant" "{" Identifier/"synchronized" BlockStatement · "(" …
Shared origin: SynchronizedStatement -> Identifier/"synchronized" · scopeStatement
  via scopeStatement -> · nonEmptyStatement
    via nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
      via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
        via Expression -> · CommaExpression
          via CommaExpression -> · csv<AssignExpression>
            via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
              via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
                via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
                  via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                    via AndAndExpression -> · OrExpression "&&" AndAndExpression
                      via OrExpression -> · XorExpression "|" OrExpression
                        via XorExpression -> · AndExpression "^" XorExpression
                          via AndExpression -> · CmpExpression "&" AndExpression
                            via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                              via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression                                via AddExpression -> · MulExpression "~" AddExpression
                                  via MulExpression -> · UnaryExpression "%" MulExpression
                                    via UnaryExpression -> · PowExpression
                                      via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                        via PostfixExpression -> · PrimaryExpression
                                          via PrimaryExpression -> · FunctionLiteral
                                            via FunctionLiteral -> · SpecifiedFunctionBody
                                              SpecifiedFunctionBody -> BlockStatement ·

shift/reduce conflict between
  UnaryExpression -> · "!" UnaryExpression
and
  DefaultStatement -> Identifier/"default" ":"
With input:
  Identifier/"invariant" "{" Identifier/"default" ":" · "!" …
Shared origin: nonEmptyStatement -> · DefaultStatement
  via DefaultStatement -> Identifier/"default" ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
          via Expression -> · CommaExpression
            via CommaExpression -> · csv<AssignExpression>
              via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
                via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
                  via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
                    via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                      via AndAndExpression -> · OrExpression "&&" AndAndExpression
                        via OrExpression -> · XorExpression "|" OrExpression
                          via XorExpression -> · AndExpression "^" XorExpression
                            via AndExpression -> · CmpExpression "&" AndExpression
                              via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                                via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                                  via AddExpression -> · MulExpression "~" AddExpression
                                    via MulExpression -> · UnaryExpression "%" MulExpression
                                      UnaryExpression -> · "!" UnaryExpression

reduce/reduce conflict between
  Parameter -> BasicType Declarator
and
  TemplateValueParameter -> BasicType Declarator
With input:
  StorageClass+ Identifier "(" BasicType Declarator · "," …
Shared origin: DeclDef -> · Declaration
  via Declaration -> · FuncDeclaration
    via FuncDeclaration -> · AutoFuncDeclaration
      via AutoFuncDeclaration -> StorageClass+ Identifier · FuncDeclaratorSuffix FunctionBody        via FuncDeclaratorSuffix -> · Parameters MemberFunctionAttribute+
          via Parameters -> "(" · parameterList ")"
            via parameterList -> · Parameter "," parameterList
              Parameter -> BasicType Declarator ·
  via Declaration -> · VarDeclarations ";"
    via VarDeclarations -> · AutoDeclaration
      via AutoDeclaration -> StorageClass+ · csv<autoAssignment>
        via csv<autoAssignment> -> · autoAssignment ("," autoAssignment)+
          via autoAssignment -> Identifier · templateParameters "=" Initializer
            via templateParameters -> "(" · csvt<templateParameter> ")"
              via csvt<templateParameter> -> · csv<templateParameter> ","
                via csv<templateParameter> -> · templateParameter ("," templateParameter)+
                  via templateParameter -> · TemplateValueParameter
                    TemplateValueParameter -> BasicType Declarator ·

reduce/reduce conflict between
  VarDeclarations -> BasicType Declarators
and
  VarDeclarations -> StorageClass+ BasicType Declarators
With input:
  Identifier/"invariant" "{" StorageClass+ BasicType Declarators · ";" …
Shared origin: Declaration -> · VarDeclarations ";"

reduce/reduce conflict between
  MissingFunctionBody -> InOutStatement
and
  FunctionContract -> InOutStatement
With input:
  Identifier/"invariant" "{" BasicType FuncDeclarator InOutStatement · Identifier/"in" …
Shared origin: FunctionBody -> · MissingFunctionBody
  via MissingFunctionBody -> · FunctionContract+ InOutStatement
    via FunctionContract+ -> · FunctionContract
      FunctionContract -> InOutStatement ·

reduce/reduce conflict between
  MixinDeclaration -> MixinExpression ";"
and
  MixinStatement -> MixinExpression ";"
With input:
  Identifier/"invariant" "{" condition MixinExpression ";" · Identifier …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          via DeclarationBlock -> · DeclDef
            via DeclDef -> · MixinDeclaration
              MixinDeclaration -> MixinExpression ";" ·
  via nonEmptyStatementNoCaseNoDefault -> · MixinStatement
    MixinStatement -> MixinExpression ";" ·

reduce/reduce conflict between
  DeclarationBlock -> "{" "}"
and
  BlockStatement -> "{" "}"
With input:
  Identifier/"invariant" "{" condition "{" "}" · Identifier …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          DeclarationBlock -> "{" "}" ·
  via nonEmptyStatementNoCaseNoDefault -> · ConditionalStatement
    via ConditionalStatement -> condition · noScopeNonEmptyStatement
      via noScopeNonEmptyStatement -> · BlockStatement
        BlockStatement -> "{" "}" ·

shift/reduce conflict between
  ConditionalStatement -> condition noScopeNonEmptyStatement · Identifier/"else" noScopeNonEmptyStatement
and
  ConditionalStatement -> condition noScopeNonEmptyStatement
With input:
  … "{" condition condition noScopeNonEmptyStatement · Identifier/"else" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · ConditionalStatement

shift/reduce conflict between
  StringLiteral -> · WysiwygString
and
  ForStatement -> Identifier/"for" initialize ";"
With input:
  Identifier/"invariant" "{" Identifier/"for" initialize ";" · WysiwygString …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · ForStatement
  via ForStatement -> Identifier/"for" initialize ";" · Expression
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · PrimaryExpression
                                      via PrimaryExpression -> · StringLiteral+
                                        via StringLiteral+ -> · StringLiteral
                                          StringLiteral -> · WysiwygString

shift/reduce conflict between
  SpecialKeyword -> · Identifier/"__FILE__"
and
  CaseStatement -> Identifier/"case" ArgumentList ":"
With input:
  Identifier/"invariant" "{" Identifier/"case" ArgumentList ":" · Identifier/"__FILE__" …
Shared origin: nonEmptyStatement -> · CaseStatement
  via CaseStatement -> Identifier/"case" ArgumentList ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
          via Expression -> · CommaExpression
            via CommaExpression -> · csv<AssignExpression>
              via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
                via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
                  via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
                    via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                      via AndAndExpression -> · OrExpression "&&" AndAndExpression
                        via OrExpression -> · XorExpression "|" OrExpression
                          via XorExpression -> · AndExpression "^" XorExpression
                            via AndExpression -> · CmpExpression "&" AndExpression
                              via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                                via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                                  via AddExpression -> · MulExpression "~" AddExpression
                                    via MulExpression -> · UnaryExpression "%" MulExpression
                                      via UnaryExpression -> · PowExpression
                                        via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                          via PostfixExpression -> · PrimaryExpression
                                            via PrimaryExpression -> · SpecialKeyword
                                              SpecialKeyword -> · Identifier/"__FILE__"

reduce/reduce conflict between
  FuncDeclaration -> BasicType FuncDeclarator FunctionBody
and
  FuncDeclaration -> StorageClass+ BasicType FuncDeclarator FunctionBody
With input:
  … "{" StorageClass+ BasicType FuncDeclarator FunctionBody · Identifier …
Shared origin: Declaration -> · FuncDeclaration

shift/reduce conflict between
  WithStatement -> Identifier/"with" "(" Identifier templateArguments · ")" scopeStatement
and
  symbolTail -> Identifier templateArguments
With input:
  … "{" Identifier/"with" "(" Identifier templateArguments · ")" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · WithStatement
  via WithStatement -> Identifier/"with" "(" · Symbol ")" scopeStatement
    via Symbol -> · symbolTail
      symbolTail -> Identifier templateArguments ·

shift/reduce conflict between
  catch -> · Identifier/"catch" "(" BasicType ")" noScopeNonEmptyStatement
and
  TryStatement -> Identifier/"try" scopeStatement catch+
With input:
  … "{" Identifier/"try" Identifier/"try" scopeStatement catch+ · Identifier/"catch" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · TryStatement
  via TryStatement -> Identifier/"try" scopeStatement · catch+
    via catch+ -> catch+ · catch+
      via catch+ -> · catch
        catch -> · Identifier/"catch" "(" BasicType ")" noScopeNonEmptyStatement

shift/reduce conflict between
  ArrayLiteral -> · "[" "]"
and
  IfStatement -> Identifier/"if" "(" ifCondition ")" ThenStatement
With input:
  … "{" Identifier/"if" "(" ifCondition ")" ThenStatement · "[" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · PrimaryExpression
                                      via PrimaryExpression -> · ArrayLiteral
                                        ArrayLiteral -> · "[" "]"
  via nonEmptyStatementNoCaseNoDefault -> · IfStatement
    IfStatement -> Identifier/"if" "(" ifCondition ")" ThenStatement ·

shift/reduce conflict between
  UserDefinedAttribute -> "@" Identifier · "(" ")"
and
  UserDefinedAttribute -> "@" Identifier
With input:
  … BasicType Identifier/"delegate" Parameters "@" Identifier · "(" …
Shared origin: AtAttribute -> · UserDefinedAttribute

shift/reduce conflict between
  Typeof -> · Identifier/"typeof" "(" Expression ")"
and
  CaseRangeStatement -> Identifier/"case" AssignExpression ":" ".." Identifier/"case" AssignExpression ":"
With input:
  … AssignExpression ":" ".." Identifier/"case" AssignExpression ":" · Identifier/"typeof" …
Shared origin: nonEmptyStatement -> · CaseRangeStatement
  via CaseRangeStatement -> Identifier/"case" AssignExpression ":" ".." Identifier/"case" AssignExpression ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
          via declarationStatement -> · Declaration
            via Declaration -> · VarDeclarations ";"
              via VarDeclarations -> · BasicType Declarators
                via BasicType -> · Typeof "." QualifiedIdentifier
                  Typeof -> · Identifier/"typeof" "(" Expression ")"
