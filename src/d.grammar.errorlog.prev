shift/reduce conflict between
  templateArguments -> · "!" TemplateSingleArgument
and
  MixinQualifiedIdentifier -> Identifier
With input:
  Identifier/"mixin" Identifier · "!" …
Shared origin: MixinTemplateName -> · MixinQualifiedIdentifier
  via MixinQualifiedIdentifier -> Identifier · templateArguments "." MixinQualifiedIdentifier
    templateArguments -> · "!" TemplateSingleArgument

shift/reduce conflict between
  BasicType -> · "." QualifiedIdentifier
and
  StorageClass+ -> StorageClass+ StorageClass+
With input:
  Identifier/"invariant" "{" StorageClass+ StorageClass+ · "." …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · declarationStatement
  via declarationStatement -> StorageClass+ · Declaration
    via Declaration -> · FuncDeclaration
      via FuncDeclaration -> StorageClass+ · BasicType FuncDeclarator FunctionBody
        BasicType -> · "." QualifiedIdentifier
  via declarationStatement -> · StorageClass+ Declaration
    StorageClass+ -> StorageClass+ StorageClass+ ·

shift/reduce conflict between
  PrimaryExpression -> · Identifier/"this"
and
  attributeExclusive -> Pragma
With input:
  Identifier/"invariant" "{" condition Pragma · Identifier/"this" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · PrimaryExpression
                                      PrimaryExpression -> · Identifier/"this"
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          via DeclarationBlock -> · DeclDef
            via DeclDef -> · AttributeSpecifier
              via AttributeSpecifier -> · Attribute DeclarationBlock
                via Attribute -> · attributeExclusive
                  attributeExclusive -> Pragma ·

reduce/reduce conflict between
  DeclDef -> Declaration
and
  declarationStatement -> Declaration
With input:
  Identifier/"invariant" "{" condition Declaration · Identifier …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · declarationStatement
  via declarationStatement -> · Declaration
    via Declaration -> · ConditionalDeclaration
      via ConditionalDeclaration -> condition · DeclarationBlock
        via DeclarationBlock -> · DeclDef
          DeclDef -> Declaration ·

shift/reduce conflict between
  ReturnStatement -> · Identifier/"return" ";"
and
  attributeAndStorageClass -> Identifier/"synchronized"
With input:
  Identifier/"invariant" "{" condition Identifier/"synchronized" · Identifier/"return" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · ReturnStatement
    ReturnStatement -> · Identifier/"return" ";"
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · StorageClass+ Declaration
      via StorageClass+ -> · StorageClass
        via StorageClass -> · attributeAndStorageClass
          attributeAndStorageClass -> Identifier/"synchronized" ·

shift/reduce conflict between
  QualifiedIdentifier -> · Identifier
and
  DefaultStatement -> Identifier/"default" ":"
With input:
  Identifier/"invariant" "{" Identifier/"default" ":" · Identifier …
Shared origin: nonEmptyStatement -> · DefaultStatement
  via DefaultStatement -> Identifier/"default" ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
          via declarationStatement -> · Declaration
            via Declaration -> · VarDeclarations ";"
              via VarDeclarations -> · BasicType Declarators
                via BasicType -> · QualifiedIdentifier
                  QualifiedIdentifier -> · Identifier

reduce/reduce conflict between
  UnaryExpression -> "+" UnaryExpression
and
  UnaryExpression -> "+" "+" UnaryExpression
With input:
  Identifier "[" "+" "+" UnaryExpression · "/" …
Shared origin: MulExpression -> · UnaryExpression "%" MulExpression
  via UnaryExpression -> "+" · UnaryExpression
    UnaryExpression -> "+" UnaryExpression ·

reduce/reduce conflict between
  VarDeclarations -> BasicType Declarators
and
  VarDeclarations -> StorageClass+ BasicType Declarators
With input:
  Identifier/"invariant" "{" StorageClass+ BasicType Declarators · ";" …
Shared origin: Declaration -> · VarDeclarations ";"

shift/reduce conflict between
  SpecifiedFunctionBody -> InOutStatement · Identifier/"do" BlockStatement
and
  MissingFunctionBody -> InOutStatement
With input:
  Identifier/"invariant" "{" BasicType FuncDeclarator InOutStatement · Identifier/"do" …
Shared origin: FuncDeclaration -> BasicType FuncDeclarator · FunctionBody
  via FunctionBody -> · SpecifiedFunctionBody
    SpecifiedFunctionBody -> InOutStatement · Identifier/"do" BlockStatement
  via FunctionBody -> · MissingFunctionBody
    MissingFunctionBody -> InOutStatement ·

shift/reduce conflict between
  Parameters -> · "(" ")"
and
  ForStatement -> Identifier/"for" statement ";"
With input:
  Identifier/"invariant" "{" Identifier/"for" statement ";" · "(" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · ForStatement
  via ForStatement -> Identifier/"for" statement ";" · Expression
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · PrimaryExpression
                                      via PrimaryExpression -> · FunctionLiteral
                                        via FunctionLiteral -> · ParameterWithMemberAttributes FunctionLiteralBody2
                                          via ParameterWithMemberAttributes -> · Parameters MemberFunctionAttribute+
                                            Parameters -> · "(" ")"

shift/reduce conflict between
  storageClassExclusive -> · Identifier/"deprecated"
and
  CaseStatement -> Identifier/"case" ArgumentList ":"
With input:
  Identifier/"invariant" "{" Identifier/"case" ArgumentList ":" · Identifier/"deprecated" …
Shared origin: nonEmptyStatement -> · CaseStatement
  via CaseStatement -> Identifier/"case" ArgumentList ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
          via declarationStatement -> · StorageClass+ Declaration
            via StorageClass+ -> · StorageClass
              via StorageClass -> · storageClassExclusive
                storageClassExclusive -> · Identifier/"deprecated"

reduce/reduce conflict between
  FuncDeclaration -> BasicType FuncDeclarator FunctionBody
and
  FuncDeclaration -> StorageClass+ BasicType FuncDeclarator FunctionBody
With input:
  … "{" StorageClass+ BasicType FuncDeclarator FunctionBody · Identifier …
Shared origin: Declaration -> · FuncDeclaration

shift/reduce conflict between
  catch -> · Identifier/"catch" "(" BasicType ")" scopeStatement
and
  TryStatement -> Identifier/"try" scopeStatement catch+
With input:
  … "{" Identifier/"try" Identifier/"try" scopeStatement catch+ · Identifier/"catch" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · TryStatement
  via TryStatement -> Identifier/"try" scopeStatement · catch+
    via catch+ -> catch+ · catch+
      via catch+ -> · catch
        catch -> · Identifier/"catch" "(" BasicType ")" scopeStatement

shift/reduce conflict between
  ThrowExpression -> · Identifier/"throw" AssignExpression ";"
and
  IfStatement -> Identifier/"if" "(" ifCondition ")" ThenStatement
With input:
  … "{" Identifier/"if" "(" ifCondition ")" ThenStatement · Identifier/"throw" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · ThrowExpression
                                  ThrowExpression -> · Identifier/"throw" AssignExpression ";"
  via nonEmptyStatementNoCaseNoDefault -> · IfStatement
    IfStatement -> Identifier/"if" "(" ifCondition ")" ThenStatement ·

shift/reduce conflict between
  VariadicArgumentsAttribute -> · Identifier/"const"
and
  TypeSuffix -> Identifier/"delegate" Parameters
With input:
  … ";" Identifier/"new" BasicType Identifier/"delegate" Parameters · Identifier/"const" …
Shared origin: TypeSuffix+ -> · TypeSuffix
  via TypeSuffix -> Identifier/"delegate" Parameters · MemberFunctionAttribute+
    via MemberFunctionAttribute+ -> · MemberFunctionAttribute
      via MemberFunctionAttribute -> · VariadicArgumentsAttribute
        VariadicArgumentsAttribute -> · Identifier/"const"

shift/reduce conflict between
  EmptyStatement -> · ";"
and
  CaseRangeStatement -> Identifier/"case" AssignExpression ":" ".." Identifier/"case" AssignExpression ":"
With input:
  … AssignExpression ":" ".." Identifier/"case" AssignExpression ":" · ";" …
Shared origin: nonEmptyStatement -> · CaseRangeStatement
  via CaseRangeStatement -> Identifier/"case" AssignExpression ":" ".." Identifier/"case" AssignExpression ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · EmptyStatement
        EmptyStatement -> · ";"
