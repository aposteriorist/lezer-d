shift/reduce conflict between
  Parameters -> · "(" ")"
and
  Declarator -> Identifier
With input:
  BasicType Identifier · "(" …
Shared origin: DeclDef -> · Declaration
  via Declaration -> · FuncDeclaration
    via FuncDeclaration -> BasicType · FuncDeclarator FunctionBody
      via FuncDeclarator -> Identifier · FuncDeclaratorSuffix
        via FuncDeclaratorSuffix -> · Parameters MemberFunctionAttribute+
          Parameters -> · "(" ")"
  via Declaration -> · VarDeclarations ";"
    via VarDeclarations -> BasicType · Declarators
      via Declarators -> · DeclaratorInitializer "," csv<DeclaratorIdentifier>
        via DeclaratorInitializer -> · Declarator templateParameters "=" Initializer
          Declarator -> Identifier ·

shift/reduce conflict between
  QualifiedIdentifier -> · Identifier
and
  StaticForeachDeclaration -> staticForeach ":"
With input:
  staticForeach ":" · Identifier …
Shared origin: DeclDef -> · Declaration
  via Declaration -> · VarDeclarations ";"
    via VarDeclarations -> · BasicType Declarators
      via BasicType -> · QualifiedIdentifier
        QualifiedIdentifier -> · Identifier
  via Declaration -> · StaticForeachDeclaration
    StaticForeachDeclaration -> staticForeach ":" ·

shift/reduce conflict between
  templateArguments -> · "!" TemplateSingleArgument
and
  MixinQualifiedIdentifier -> Identifier
With input:
  Identifier/"mixin" Identifier · "!" …
Shared origin: MixinTemplateName -> · MixinQualifiedIdentifier
  via MixinQualifiedIdentifier -> Identifier · templateArguments "." MixinQualifiedIdentifier
    templateArguments -> · "!" TemplateSingleArgument

reduce/reduce conflict between
  TypeCtor+ -> TypeCtor
and
  attributeAndStorageClass -> TypeCtor
With input:
  Identifier/"invariant" "{" TypeCtor · Identifier …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · TypeCtor+ BasicType "(" ArgumentList ")"
                                      TypeCtor+ -> TypeCtor ·
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · StorageClass+ Declaration
      via StorageClass+ -> · StorageClass
        via StorageClass -> · attributeAndStorageClass
          attributeAndStorageClass -> TypeCtor ·

reduce/reduce conflict between
  Declaration -> ImportDeclaration
and
  nonEmptyStatementNoCaseNoDefault -> ImportDeclaration
With input:
  Identifier/"invariant" "{" ImportDeclaration · Identifier …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      Declaration -> ImportDeclaration ·

shift/reduce conflict between
  TypeSuffix -> · "[" "]"
and
  Type -> BasicType
With input:
  Identifier "[" Identifier/"new" BasicType · "[" …
Shared origin: NewExpression -> Identifier/"new" · Type
  via Type -> BasicType · TypeSuffix+
    via TypeSuffix+ -> · TypeSuffix
      TypeSuffix -> · "[" "]"

shift/reduce conflict between
  BasicType -> · "." QualifiedIdentifier
and
  StorageClass+ -> StorageClass+ StorageClass+
With input:
  Identifier/"invariant" "{" StorageClass+ StorageClass+ · "." …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · declarationStatement
  via declarationStatement -> StorageClass+ · Declaration
    via Declaration -> · FuncDeclaration
      via FuncDeclaration -> StorageClass+ · BasicType FuncDeclarator FunctionBody
        BasicType -> · "." QualifiedIdentifier
  via declarationStatement -> · StorageClass+ Declaration
    StorageClass+ -> StorageClass+ StorageClass+ ·

shift/reduce conflict between
  MixinDeclaration -> MixinExpression · ";"
and
  PrimaryExpression -> MixinExpression
With input:
  Identifier/"invariant" "{" condition MixinExpression · ";" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          via DeclarationBlock -> · DeclDef
            via DeclDef -> · MixinDeclaration
              MixinDeclaration -> MixinExpression · ";"
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · PrimaryExpression
                                      PrimaryExpression -> MixinExpression ·

shift/reduce conflict between
  EmptyStatement -> · ";"
and
  attributeExclusive -> Pragma
With input:
  Identifier/"invariant" "{" condition Pragma · ";" …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · PragmaStatement
    via PragmaStatement -> Pragma · statement
      via statement -> · EmptyStatement
        EmptyStatement -> · ";"
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          via DeclarationBlock -> · DeclDef
            via DeclDef -> · AttributeSpecifier
              via AttributeSpecifier -> · Attribute DeclarationBlock
                via Attribute -> · attributeExclusive
                  attributeExclusive -> Pragma ·

reduce/reduce conflict between
  DeclDef -> Declaration
and
  declarationStatement -> Declaration
With input:
  Identifier/"invariant" "{" condition Declaration · Identifier …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · declarationStatement
  via declarationStatement -> · Declaration
    via Declaration -> · ConditionalDeclaration
      via ConditionalDeclaration -> condition · DeclarationBlock
        via DeclarationBlock -> · DeclDef
          DeclDef -> Declaration ·

shift/reduce conflict between
  storageClassExclusive -> · Identifier/"deprecated"
and
  DefaultStatement -> Identifier/"default" ":"
With input:
  Identifier/"invariant" "{" Identifier/"default" ":" · Identifier/"deprecated" …
Shared origin: nonEmptyStatement -> · DefaultStatement
  via DefaultStatement -> Identifier/"default" ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
          via declarationStatement -> · StorageClass+ Declaration
            via StorageClass+ -> · StorageClass
              via StorageClass -> · storageClassExclusive
                storageClassExclusive -> · Identifier/"deprecated"

reduce/reduce conflict between
  UnaryExpression -> "+" UnaryExpression
and
  UnaryExpression -> "+" "+" UnaryExpression
With input:
  Identifier "[" "+" "+" UnaryExpression · "/" …
Shared origin: MulExpression -> · UnaryExpression "%" MulExpression
  via UnaryExpression -> "+" · UnaryExpression
    UnaryExpression -> "+" UnaryExpression ·

reduce/reduce conflict between
  VarDeclarations -> BasicType Declarators
and
  VarDeclarations -> StorageClass+ BasicType Declarators
With input:
  Identifier/"invariant" "{" StorageClass+ BasicType Declarators · ";" …
Shared origin: Declaration -> · VarDeclarations ";"

shift/reduce conflict between
  SpecifiedFunctionBody -> InOutStatement · Identifier/"do" BlockStatement
and
  MissingFunctionBody -> InOutStatement
With input:
  Identifier/"invariant" "{" BasicType FuncDeclarator InOutStatement · Identifier/"do" …
Shared origin: FuncDeclaration -> BasicType FuncDeclarator · FunctionBody
  via FunctionBody -> · SpecifiedFunctionBody
    SpecifiedFunctionBody -> InOutStatement · Identifier/"do" BlockStatement
  via FunctionBody -> · MissingFunctionBody
    MissingFunctionBody -> InOutStatement ·

reduce/reduce conflict between
  DeclarationBlock -> "{" "}"
and
  BlockStatement -> "{" "}"
With input:
  Identifier/"invariant" "{" condition "{" "}" · Identifier …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
    via declarationStatement -> · Declaration
      via Declaration -> · ConditionalDeclaration
        via ConditionalDeclaration -> condition · DeclarationBlock
          DeclarationBlock -> "{" "}" ·
  via nonEmptyStatementNoCaseNoDefault -> · ConditionalStatement
    via ConditionalStatement -> condition · scopeStatement
      via scopeStatement -> · BlockStatement
        BlockStatement -> "{" "}" ·

shift/reduce conflict between
  ThrowExpression -> · Identifier/"throw" AssignExpression ";"
and
  ForStatement -> Identifier/"for" initialize ";"
With input:
  Identifier/"invariant" "{" Identifier/"for" initialize ";" · Identifier/"throw" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · ForStatement
  via ForStatement -> Identifier/"for" initialize ";" · Expression
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · ThrowExpression
                                  ThrowExpression -> · Identifier/"throw" AssignExpression ";"

shift/reduce conflict between
  FundamentalType -> · Identifier/"bool"
and
  CaseStatement -> Identifier/"case" ArgumentList ":"
With input:
  Identifier/"invariant" "{" Identifier/"case" ArgumentList ":" · Identifier/"bool" …
Shared origin: nonEmptyStatement -> · CaseStatement
  via CaseStatement -> Identifier/"case" ArgumentList ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · declarationStatement
          via declarationStatement -> · Declaration
            via Declaration -> · VarDeclarations ";"
              via VarDeclarations -> · BasicType Declarators
                via BasicType -> · FundamentalType
                  FundamentalType -> · Identifier/"bool"

reduce/reduce conflict between
  FuncDeclaration -> BasicType FuncDeclarator FunctionBody
and
  FuncDeclaration -> StorageClass+ BasicType FuncDeclarator FunctionBody
With input:
  … "{" StorageClass+ BasicType FuncDeclarator FunctionBody · Identifier …
Shared origin: Declaration -> · FuncDeclaration

shift/reduce conflict between
  catch -> · Identifier/"catch" "(" BasicType ")" scopeStatement
and
  TryStatement -> Identifier/"try" scopeStatement catch+
With input:
  … "{" Identifier/"try" Identifier/"try" scopeStatement catch+ · Identifier/"catch" …
Shared origin: nonEmptyStatementNoCaseNoDefault -> · TryStatement
  via TryStatement -> Identifier/"try" scopeStatement · catch+
    via catch+ -> catch+ · catch+
      via catch+ -> · catch
        catch -> · Identifier/"catch" "(" BasicType ")" scopeStatement

shift/reduce conflict between
  StringLiteral -> · WysiwygString
and
  IfStatement -> Identifier/"if" "(" ifCondition ")" ThenStatement
With input:
  … "{" Identifier/"if" "(" ifCondition ")" ThenStatement · WysiwygString …
Shared origin: nonEmptyStatement -> · nonEmptyStatementNoCaseNoDefault
  via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
    via Expression -> · CommaExpression
      via CommaExpression -> · csv<AssignExpression>
        via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
          via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
            via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression
              via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                via AndAndExpression -> · OrExpression "&&" AndAndExpression
                  via OrExpression -> · XorExpression "|" OrExpression
                    via XorExpression -> · AndExpression "^" XorExpression
                      via AndExpression -> · CmpExpression "&" AndExpression
                        via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                          via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                            via AddExpression -> · MulExpression "~" AddExpression
                              via MulExpression -> · UnaryExpression "%" MulExpression
                                via UnaryExpression -> · PowExpression
                                  via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                    via PostfixExpression -> · PrimaryExpression
                                      via PrimaryExpression -> · StringLiteral+
                                        via StringLiteral+ -> · StringLiteral
                                          StringLiteral -> · WysiwygString
  via nonEmptyStatementNoCaseNoDefault -> · IfStatement
    IfStatement -> Identifier/"if" "(" ifCondition ")" ThenStatement ·

shift/reduce conflict between
  SpecialKeyword -> · Identifier/"__FILE__"
and
  CaseRangeStatement -> Identifier/"case" AssignExpression ":" ".." Identifier/"case" AssignExpression ":"
With input:
  … AssignExpression ":" ".." Identifier/"case" AssignExpression ":" · Identifier/"__FILE__" …
Shared origin: nonEmptyStatement -> · CaseRangeStatement
  via CaseRangeStatement -> Identifier/"case" AssignExpression ":" ".." Identifier/"case" AssignExpression ":" · statementNoCaseNoDefault+
    via statementNoCaseNoDefault+ -> · statementNoCaseNoDefault
      via statementNoCaseNoDefault -> · nonEmptyStatementNoCaseNoDefault
        via nonEmptyStatementNoCaseNoDefault -> · Expression ";"
          via Expression -> · CommaExpression
            via CommaExpression -> · csv<AssignExpression>
              via csv<AssignExpression> -> · AssignExpression ("," AssignExpression)+
                via AssignExpression -> · ConditionalExpression assignmentToken AssignExpression
                  via ConditionalExpression -> · OrOrExpression "?" Expression ":" ConditionalExpression                    via OrOrExpression -> · AndAndExpression "||" OrOrExpression
                      via AndAndExpression -> · OrExpression "&&" AndAndExpression
                        via OrExpression -> · XorExpression "|" OrExpression
                          via XorExpression -> · AndExpression "^" XorExpression
                            via AndExpression -> · CmpExpression "&" AndExpression
                              via CmpExpression -> · ShiftExpression "!" InExpression ShiftExpression
                                via ShiftExpression -> · AddExpression ">>" ">" ShiftExpression
                                  via AddExpression -> · MulExpression "~" AddExpression
                                    via MulExpression -> · UnaryExpression "%" MulExpression
                                      via UnaryExpression -> · PowExpression
                                        via PowExpression -> · PostfixExpression "^^" UnaryExpression
                                          via PostfixExpression -> · PrimaryExpression
                                            via PrimaryExpression -> · SpecialKeyword
                                              SpecialKeyword -> · Identifier/"__FILE__"
